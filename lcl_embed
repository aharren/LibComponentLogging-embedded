#!/usr/bin/env ruby

#
#
# lcl_embed -- LibComponentLogging, embedded
#
#
# Copyright (c) 2012-2014 Arne Harren <ah@0xc0.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'FileUtils'

@usage=<<END
usage: lcl_embed <project-name> <symbol-prefix> <folder>
END

def print_usage_and_exit(message = '')
  puts "lcl_embed: " + message if message != ''
  puts @usage
  exit
end

def process_symbol(text, project_name, symbol_prefix)
  if text.end_with?('.h') or text.end_with?('.m') or text.end_with?('.c')
    return text.sub('.', "_" + symbol_prefix + '.')
  else
    text = text.gsub('lcl_', symbol_prefix + 'lcl' + '_')
    text = text.gsub('LCL_', symbol_prefix + 'LCL' + '_')
    text = text.sub(/LCL[A-Z][a-zA-z]+/) { |s| symbol_prefix + s }
    return text
  end
end

def process_file_name(file, project_name, symbol_prefix)
  folder = File.dirname(file)
  name = File.basename(file)

  if file.end_with?('.template.h')
    puts 'D ' + file
    FileUtils.rm(file)
  else
    newname = name.sub(/(lcl|LCL)[a-zA-Z_]*(\.h|\.m)/) {|s| process_symbol(s, project_name, symbol_prefix)}
    puts 'R ' + file + ' -> ' + newname
    FileUtils.mv(file, folder + '/' + newname)
  end
end

def process_file_content(file, project_name, symbol_prefix)
  content = File.read(file)

  newcontent = content.gsub(/(lcl|LCL)[a-zA-Z_]*(\.h|\.m|)/) {|s| process_symbol(s, project_name, symbol_prefix)}
  newcontent = newcontent.gsub(' -- LibComponentLogging', ' -- LibComponentLogging, embedded, ' + project_name + '/' + symbol_prefix)
  return if content == newcontent

  puts 'M ' + file
  File.open(file, "w") {|f| f.puts newcontent}
end

def main(args)
  project_name = args[0]
  print_usage_and_exit('missing argument <project-name>') if !project_name

  symbol_prefix = args[1]
  print_usage_and_exit('missing argument <symbol-prefix>') if !symbol_prefix

  folder = args[2]
  print_usage_and_exit('missing argument <folder>') if !folder

  Dir.chdir(folder) do
    Dir.glob('**/{lcl,LCL}*{.h,.m,.c}').each do|file|
      next if File.dirname(file).start_with?('Build')
      process_file_name(file, project_name, symbol_prefix)
    end
    Dir.glob('**/*{.h,.m,.c,.pbxproj}').each do|file|
      next if File.dirname(file).start_with?('Build')
      process_file_content(file, project_name, symbol_prefix) if File.file? file
    end
  end
  exit
end

main(ARGV)

